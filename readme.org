* This project
  This is a simple web server implemented in C-style C++, no libraries.
  Target platforms are Linux and Windows. There is a chance the Linux port also works on other Unix platforms.

* How to compile
** Windows
We use Microsoft's C/C++ compiler MSVC. 
You can install Microsoft's compiler by installing Visual Studio.
The community edition should work fine.
Once you've installed Visual Studio, launch a terminal.
You want to look for the vcvarsall.bat file and run it with the argument x64
(if you want to use the 64-bit compiler).
The path to this file will probably look like this:
=C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat=
     
Once you've run the vcvarsall.bat file, then _in that shell session_, 
you should be able to run the build.bat file contained in the source folder, from the terminal. 
That will compile the program into the build folder.
#+BEGIN_SRC bat
cd src
build.bat
#+END_SRC

To automate this process of running vcvarsall.bat for development, 
you can make a shell.bat file that contains this instruction:
#+BEGIN_SRC bat
call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" x64
#+END_SRC
Then make a shortcut to the Windows cmd program:
modify the properties of the shortcut via right click -> properties,
setting the shortcut target field to:
#+BEGIN_SRC 
C:\WINDOWS\system32\cmd.exe /k "your\path\to\shell.bat"
#+END_SRC
so that opening a terminal through this shortcut will automatically execute the shell.bat script.

** Linux
You need to have the gcc compiler installed.
Once that is done, compiling the program should be as simple as
#+BEGIN_SRC bash
cd src
./build.sh
#+END_SRC
If successful, that will create the executable into the build folder.

Sometimes you may not have the execution right on the build.sh file. In that case, try: 
#+BEGIN_SRC bash
chmod +x build.sh
#+END_SRC
before running build.sh.
     

* How to run the server
Once the program is compiled, run the executable file in the build folder from a terminal.
The executable should be either called server_win32.exe (for Windows) or server_linux (for Linux).
When you run the executable, it first tries to parse the config file located in the same folder as the
 executable, so that it retrieves a port number and the root folder path of your websites to host.
If successful, you should then be able to have your website show up in a browser.
For example, if you set the port to 3490, and you have an index.html file in your root website folder,
you should be able to display it in a web browser by typing the URL:
#+BEGIN_SRC
localhost:3490/index.html
#+END_SRC


   

* Should be done
- Handle GET request in HTTP/1.x, ignore the others methods like PUT, etc.
- Correctly display the given websites
- should be able to handle connections in parallel (e.g. 1 thread = 1 connection ?)
- stdout log: caller's IP + request
- externalize config in a properties file
  root folder where to put the websites, TCP port (80 by default)
- make sure there is no blocking (disk I/O or listening to network) call inside of the server loop
  that is not handled in a parallel way. (producer/consumer ?)
  NOTE: Currently, main thread is only blocked by accept(). Other threads are "blocked" by file reads.

* Not done yet
- good doc and comments
- should be able to host several domain names (multisite)
- should protect a folder if it contains a .htpasswd file
  that file contains lines in the form    username:password_in_md5

- implement one of these bonus functionalities:
  - handle server-side includes (#include, #exec)
  - generate dynamic content with an external program (php/python/node)
  - handle folders listing (config should allow the user to disable this)
  - compress js and css resources in gzip




